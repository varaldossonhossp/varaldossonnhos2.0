// ============================================================
// ðŸ’¼ VARAL DOS SONHOS â€” /api/admin.js (Airtable + Vercel)
// ============================================================
import Airtable from "airtable";

export const config = { runtime: "nodejs" };

const ok = (res, data) => res.status(200).json(data);
const err = (res, code, msg) => res.status(code).json({ sucesso: false, mensagem: msg });

function getToken(req) {
Â  return (
Â  Â  req.headers["x-admin-token"] ||
Â  Â  req.query.token_admin ||
Â  Â  (req.body && req.body.token_admin) ||
Â  Â  ""
Â  );
}

function requireAuth(req, res) {
Â  const secret = process.env.ADMIN_SECRET;
Â  if (!secret) return err(res, 500, "ADMIN_SECRET nÃ£o configurado.");
Â  const token = getToken(req);
Â  if (!token) return err(res, 401, "Token ausente.");
Â  if (token !== secret) return err(res, 401, "Token invÃ¡lido.");
Â  return true;
}

function getAirtable() {
Â  const apiKey = process.env.AIRTABLE_API_KEY;
Â  const baseId = process.env.AIRTABLE_BASE_ID;
Â  // Define a tabela principal como 'eventos' para esta API
Â  const table = process.env.AIRTABLE_EVENTOS_TABLE || "eventos"; 
Â  if (!apiKey || !baseId) throw new Error("Chaves do Airtable ausentes.");
Â  const base = new Airtable({ apiKey }).base(baseId);
Â  return { base, table };
}

export default async function handler(req, res) {
Â  // CORS
Â  res.setHeader("Access-Control-Allow-Origin", "*");
Â  res.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
Â  res.setHeader("Access-Control-Allow-Headers", "Content-Type,x-admin-token");
Â  if (req.method === "OPTIONS") return res.status(204).end();

Â  const auth = requireAuth(req, res);
Â  if (auth !== true) return;

Â  const { base, table } = getAirtable();

Â  try {
Â  Â  if (req.method === "GET") {
Â  Â  Â  const { tipo } = req.query;
Â  Â  Â  if (tipo !== "eventos") return err(res, 400, "Tipo invÃ¡lido.");

Â  Â  Â  const registros = await base(table).select().all();
Â  Â  Â  return ok(res, { sucesso: true, eventos: registros });
Â  Â  }

Â  Â  if (req.method === "POST") {
Â  Â  Â  const { acao, id_evento, fields } = req.body || {};

Â  Â  Â  // AÃ§Ã£o: criar â€” mapeia diretamente os campos da tabela
Â  Â  Â  if (acao === "criar") {
Â  Â  Â  Â  const {
Â  Â  Â  Â  Â  nome_evento,
Â  Â  Â  Â  Â  local_evento,
Â  Â  Â  Â  Â  descricao,
Â  Â  Â  Â  Â  data_evento,
Â  Â  Â  Â  Â  data_limite_recebimento,
Â  Â  Â  Â  Â  destacar_na_homepage,
Â  Â  Â  Â  Â  imagem, // [{url}]
Â  Â  Â  Â  } = req.body || {};

Â  Â  Â  Â  const newFields = {
Â  Â  Â  Â  Â  nome_evento,
Â  Â  Â  Â  Â  local_evento,
Â  Â  Â  Â  Â  descricao,
Â  Â  Â  Â  Â  data_evento: data_evento || null,
Â  Â  Â  Â  Â  data_limite_recebimento: data_limite_recebimento || null,
Â  Â  Â  Â  Â  destacar_na_homepage: !!destacar_na_homepage,
Â  Â  Â  Â  Â  // Airtable espera o anexo como [{ url: "..." }]
Â  Â  Â  Â  Â  imagem: Array.isArray(imagem) ? imagem : [], 
Â  Â  Â  Â  Â  status_evento: "em andamento",
Â  Â  Â  Â  Â  ativo: true, // Campo auxiliar para controle
Â  Â  Â  Â  };

Â  Â  Â  Â  const created = await base(table).create([{ fields: newFields }]);
Â  Â  Â  Â  return ok(res, { sucesso: true, id: created[0].id });
Â  Â  Â  }

Â  Â  Â  // AÃ§Ã£o: atualizar â€” permite atualizar qualquer subconjunto de campos
Â  Â  Â  if (acao === "atualizar") {
Â  Â  Â  Â  if (!id_evento) return err(res, 400, "id_evento ausente.");
Â  Â  Â  Â  if (!fields || typeof fields !== "object") return err(res, 400, "fields ausente/ invÃ¡lido.");

Â  Â  Â  Â  await base(table).update([{ id: id_evento, fields }]);
Â  Â  Â  Â  return ok(res, { sucesso: true });
Â  Â  Â  }

Â  Â  Â  // AÃ§Ã£o: excluir
Â  Â  Â  if (acao === "excluir") {
Â  Â  Â  Â  if (!id_evento) return err(res, 400, "id_evento ausente.");
Â  Â  Â  Â  await base(table).destroy([id_evento]);
Â  Â  Â  Â  return ok(res, { sucesso: true });
Â  Â  Â  }

Â  Â  Â  return err(res, 400, "AÃ§Ã£o invÃ¡lida.");
Â  Â  }

Â  Â  return err(res, 405, "MÃ©todo nÃ£o suportado.");
Â  } catch (e) {
Â  Â  console.error("Erro /api/admin:", e);
Â  Â  return err(res, 500, e.message || "Erro interno.");
Â  }
}