// ============================================================
// ðŸ‘¥ VARAL DOS SONHOS â€” /js/cadastro.js (versÃ£o final)
// ------------------------------------------------------------
// Todos os campos verificados como obrigatÃ³rios
// ============================================================

document.addEventListener("DOMContentLoaded", () => {
Â  const form = document.getElementById("formCadastro");
Â  const feedbackMsg = document.getElementById("feedback-msg");
Â  if (!form) return;

Â  const exibirFeedback = (mensagem, tipo = "sucesso") => {
Â  Â  feedbackMsg.textContent = mensagem;
Â  Â  feedbackMsg.className = `feedback ${tipo}`;
Â  Â  feedbackMsg.classList.remove("hidden");
Â  Â  setTimeout(() => feedbackMsg.classList.add("hidden"), 5000);
Â  };

Â  // ðŸ§­ Auto-preenchimento do endereÃ§o via CEP (ViaCEP)
Â  const cepInput = document.getElementById("cep");
Â  if (cepInput) {
Â  Â  cepInput.addEventListener("blur", async () => {
Â  Â  Â  const cep = cepInput.value.replace(/\D/g, "");
Â  Â  Â  if (cep.length !== 8) return;

Â  Â  Â  try {
Â  Â  Â  Â  const resp = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
Â  Â  Â  Â  if (!resp.ok) return;
Â  Â  Â  Â  const dados = await resp.json();
Â  Â  Â  Â  if (dados.erro) return;

Â  Â  Â  Â  document.getElementById("endereco").value = [dados.logradouro, dados.bairro]
Â  Â  Â  Â  Â  .filter(Boolean)
Â  Â  Â  Â  Â  .join(dados.logradouro && dados.bairro ? " - " : "");
Â  Â  Â  Â  document.getElementById("cidade").value = [dados.localidade, dados.uf]
Â  Â  Â  Â  Â  .filter(Boolean)
Â  Â  Â  Â  Â  .join("/");
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  console.warn("Erro ao buscar CEP:", e);
Â  Â  Â  }
Â  Â  });
Â  }

Â  form.addEventListener("submit", async (e) => {
Â  Â  e.preventDefault();
Â  Â  feedbackMsg.classList.add("hidden");

Â  Â  // Lista de IDs de campos OBRIGATÃ“RIOS (incluindo 'numero')
Â  Â  const camposObrigatorios = [
Â  Â  Â  "nome_usuario", "cep", "endereco", "numero", "cidade",
Â  Â  Â  "email_usuario", "telefone", "tipo_usuario", "senha"
Â  Â  ];
    
Â  Â  // 1. Verifica todos os campos obrigatÃ³rios
Â  Â  for (const id of camposObrigatorios) {
Â  Â  Â  const el = document.getElementById(id);
Â  Â  Â  // Valida se o elemento existe E se seu valor estÃ¡ vazio
Â  Â  Â  if (!el || !el.value.trim()) {
Â  Â  Â  Â  exibirFeedback("Por favor, preencha todos os campos obrigatÃ³rios.", "erro");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  }

    // 2. Prepara o Payload
Â  Â  const payload = Object.fromEntries(
        camposObrigatorios.map(id => [id, document.getElementById(id).value.trim()])
    );

Â  Â  const submitBtn = form.querySelector('button[type="submit"]');
Â  Â  submitBtn.disabled = true;
Â  Â  submitBtn.textContent = "Cadastrando...";

Â  Â  try {
Â  Â  Â  const resp = await fetch("/api/usuarios", {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify(payload),
Â  Â  Â  });

Â  Â  Â  const data = await resp.json().catch(() => null);

Â  Â  Â  if (!resp.ok) {
Â  Â  Â  Â  const msg = data?.mensagem || "Erro ao cadastrar usuÃ¡rio. Tente novamente.";
Â  Â  Â  Â  exibirFeedback(msg, "erro");
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  exibirFeedback("ðŸŽ‰ Cadastro realizado com sucesso! Redirecionando...", "sucesso");
Â  Â  Â  form.reset();
Â  Â  Â  setTimeout(() => (window.location.href = "login.html"), 1500);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro de rede:", err);
Â  Â  Â  exibirFeedback("Erro de conexÃ£o. Verifique sua internet e tente novamente.", "erro");
Â  Â  } finally {
Â  Â  Â  submitBtn.disabled = false;
Â  Â  Â  submitBtn.textContent = "Cadastrar";
Â  Â  }
Â  });
});