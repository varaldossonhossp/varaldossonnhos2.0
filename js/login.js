// ============================================================
// üíô VARAL DOS SONHOS ‚Äî /js/login.js (Vers√£o Final TCC)
// ------------------------------------------------------------
// Fun√ß√£o: autentica o usu√°rio (doador, volunt√°rio ou admin)
// usando a rota unificada /api/usuarios.
//
// Este m√≥dulo √© respons√°vel por validar as credenciais,
// enviar os dados √† API, salvar a sess√£o do usu√°rio no
// navegador (localStorage) e redirecionar conforme o tipo
// de perfil.
//
// Fluxo principal:
//   1Ô∏è‚É£ Captura e valida√ß√£o dos campos do formul√°rio
//   2Ô∏è‚É£ Comunica√ß√£o com a API (acao = "login")
//   3Ô∏è‚É£ Armazenamento da sess√£o no localStorage
//   4Ô∏è‚É£ Exibi√ß√£o de mensagem motivacional üíå
//   5Ô∏è‚É£ Redirecionamento (Home ou Painel Admin)
// ============================================================

document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("formLogin");

  // üîç Verifica√ß√£o de seguran√ßa ‚Äî garante que o script
  // s√≥ execute se o formul√°rio estiver presente no DOM.
  if (!form) {
    console.error("‚ùå Formul√°rio de login n√£o encontrado!");
    return;
  }

  // ------------------------------------------------------------
  // üéØ EVENTO DE SUBMISS√ÉO DO FORMUL√ÅRIO
  // ------------------------------------------------------------
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // ============================================================
    // 1Ô∏è‚É£ CAPTURA E VALIDA√á√ÉO DOS CAMPOS
    // ------------------------------------------------------------
    // Garante que o usu√°rio preencheu os campos obrigat√≥rios
    // antes de enviar a requisi√ß√£o ao servidor.
    // ============================================================
    const email = document.getElementById("email").value.trim();
    const senha = document.getElementById("senha").value.trim();

    if (!email || !senha) {
      alert("‚ö†Ô∏è Preencha todos os campos para continuar!");
      return;
    }

    try {
      // ============================================================
      // 2Ô∏è‚É£ ENVIO DOS DADOS √Ä API
      // ------------------------------------------------------------
      // O sistema utiliza a rota unificada /api/usuarios.
      // O campo ‚Äúacao: login‚Äù indica ao servidor que se trata
      // de uma autentica√ß√£o (e n√£o cadastro).
      // ============================================================
      const resp = await fetch("/api/usuarios", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          acao: "login",
          email_usuario: email,
          senha: senha,
        }),
      });

      // Retorna erro em caso de falha HTTP
      if (!resp.ok) throw new Error(`Erro HTTP ${resp.status}`);

      const dados = await resp.json();

      // ============================================================
      // 3Ô∏è‚É£ VALIDA√á√ÉO DA RESPOSTA
      // ------------------------------------------------------------
      // Verifica se o servidor respondeu com sucesso e se o
      // objeto ‚Äúusuario‚Äù foi retornado corretamente.
      // ============================================================
      if (!dados.sucesso || !dados.usuario) {
        alert("‚ùå E-mail ou senha incorretos. Verifique e tente novamente.");
        return;
      }

      // ============================================================
      // 4Ô∏è‚É£ SALVAMENTO DA SESS√ÉO NO LOCALSTORAGE
      // ------------------------------------------------------------
      // Os dados essenciais do usu√°rio s√£o salvos localmente
      // para manter o estado de login ativo entre p√°ginas.
      //
      // Observa√ß√£o: padronizado com a chave ‚Äúusuario‚Äù para
      // compatibilidade com o header (componentes.js).
      // ============================================================
      localStorage.setItem(
        "usuario",
        JSON.stringify({
          id: dados.usuario.id || "",
          nome: dados.usuario.nome_usuario || "",
          email: dados.usuario.email_usuario || "",
          tipo: dados.usuario.tipo_usuario || "doador",
        })
      );

      // ============================================================
      // 5Ô∏è‚É£ MENSAGEM EMOCIONAL PERSONALIZADA
      // ------------------------------------------------------------
      // Expressa a identidade afetiva e solid√°ria do projeto,
      // refor√ßando o prop√≥sito social da plataforma.
      // ============================================================
      const nome = dados.usuario.nome_usuario.split(" ")[0];
      alert(
        `üíô Bem-vindo(a), ${nome}!\n\nSua generosidade ilumina caminhos e faz o mundo sonhar mais alto.\nContinue espalhando esperan√ßa! üåü`
      );

      // ============================================================
      // 6Ô∏è‚É£ REDIRECIONAMENTO CONFORME O TIPO DE USU√ÅRIO
      // ------------------------------------------------------------
      // Ap√≥s login, o usu√°rio √© levado para a p√°gina adequada
      // conforme seu perfil: administrador ‚Üí painel /pages/admin.html,
      // demais ‚Üí p√°gina inicial.
      // ============================================================
      if (dados.usuario.tipo_usuario === "administrador") {
        window.location.href = "../pages/admin.html";
      } else {
        window.location.href = "../index.html";
      }
    } catch (err) {
      // ============================================================
      // ‚ö†Ô∏è TRATAMENTO DE ERROS GERAIS
      // ------------------------------------------------------------
      // Exibe mensagens de falha na comunica√ß√£o ou exce√ß√µes do servidor.
      // ============================================================
      console.error("‚ö†Ô∏è Erro ao efetuar login:", err);
      alert("‚ö†Ô∏è Erro ao conectar com o servidor. Tente novamente mais tarde.");
    }
  });
});
